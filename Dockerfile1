FROM centos8:latest

MAINTAINER Craig Ziesman <cziesman@redhat.com>

ARG user=jenkins
ARG group=jenkins
ARG uid=1000
ARG gid=0
ARG http_port=8080
ARG agent_port=50000
ARG HOME=/var/jenkins_home
ARG JENKINS_HOME=/var/jenkins_home
ARG REF=/usr/share/jenkins/ref
ARG MAVEN_VERSION=3.6.3
ARG SDKMAN_DIR=/var/jenkins_home/.sdkman
ARG JAVA_VERSION=11.0.7.j9-adpt

ENV SDKMAN_DIR=$SDKMAN_DIR \
    MAVEN_VERSION=$MAVEN_VERSION \
    JAVA_VERSION=$JAVA_VERSION \
    JENKINS_VERSION="2.240" \
    JENKINS_SHA=cd9ae88a2fd47fed888a7cc0a9a9b3aac16f5a13ee3e3b0258cf7db47790a0e5 \
    JENKINS_USER=admin \
    JENKINS_PASS=admin \
    JENKINS_HOME=$JENKINS_HOME \
    JENKINS_SLAVE_AGENT_PORT=${agent_port} \
    JENKINS_UC=https://updates.jenkins.io \
    JENKINS_UC_EXPERIMENTAL=https://updates.jenkins.io/experimental \
    JENKINS_INCREMENTALS_REPO_MIRROR=https://repo.jenkins-ci.org/incrementals \
    HOME=$JENKINS_HOME \
    REF=$REF \
    JAVA_OPTS="-Djenkins.install.runSetupWizard=false" \
    COPY_REFERENCE_FILE_LOG=$JENKINS_HOME/copy_reference_file.log

RUN yum install skopeo zip unzip which curl -y && \
    yum clean all && \
    mkdir $HOME && \
    curl -s "https://get.sdkman.io" | bash && \
    echo "sdkman_auto_answer=true" > $SDKMAN_DIR/etc/config && \
    echo "sdkman_auto_selfupdate=false" >> $SDKMAN_DIR/etc/config && \
    echo "sdkman_insecure_ssl=true" >> $SDKMAN_DIR/etc/config && \
    source $SDKMAN_DIR/bin/sdkman-init.sh && \
    sdk install java $JAVA_VERSION && \
    sdk use java $JAVA_VERSION && \
    sdk install maven $MAVEN_VERSION && \
    sdk use maven $MAVEN_VERSION && \
    echo $PATH

# Jenkins is run with user `jenkins`, uid = 1000
# If you bind mount a volume from the host or a data container,
# ensure you use the same uid
RUN mkdir -p $JENKINS_HOME \
  && chown ${uid}:${gid} $JENKINS_HOME \
  && useradd -d "$JENKINS_HOME" -u ${uid} -g ${gid} -m -s /bin/bash ${user}

# Jenkins home directory is a volume, so configuration and build history
# can be persisted and survive image upgrades
VOLUME $JENKINS_HOME

# $REF (defaults to `/usr/share/jenkins/ref/`) contains all reference configuration we want
# to set on a fresh new installation. Use it to bundle additional plugins
# or config file with your custom jenkins Docker image.
RUN mkdir -p ${REF}/init.groovy.d

# Use tini as subreaper in Docker container to adopt zombie processes
COPY tini_0.19.0.rpm /tmp/tini.rpm
RUN rpm -ivh /tmp/tini.rpm && \
    rm /tmp/tini.rpm

# Can be used to customize where jenkins.war get downloaded from
ARG JENKINS_URL=https://repo.jenkins-ci.org/public/org/jenkins-ci/main/jenkins-war/${JENKINS_VERSION}/jenkins-war-${JENKINS_VERSION}.war

# could use ADD but this one does not check Last-Modified header neither does it allow to control checksum
# see https://github.com/docker/docker/issues/8331
RUN curl -fsSL ${JENKINS_URL} -o /usr/share/jenkins/jenkins.war && \
    echo "${JENKINS_SHA}  /usr/share/jenkins/jenkins.war" | sha256sum -c -

RUN chown -R ${user} "$JENKINS_HOME" "$REF"

# for main web interface:
EXPOSE ${http_port}

# will be used by attached slave agents:
EXPOSE ${agent_port}

USER ${user}

COPY jenkins-support /usr/local/bin/jenkins-support
COPY jenkins.sh /usr/local/bin/jenkins.sh
COPY tini-shim.sh /bin/tini
ENTRYPOINT ["/bin/tini", "--", "/usr/local/bin/jenkins.sh"]

# from a derived Dockerfile, can use `RUN install-plugins.sh plugins.txt` to setup $REF/plugins from a support bundle
COPY install-plugins.sh /usr/local/bin/install-plugins.sh
COPY plugins.txt /tmp/plugins.txt

RUN /usr/local/bin/install-plugins.sh < /tmp/plugins.txt && \
    rm /tmp/plugins.txt

USER ${user}
